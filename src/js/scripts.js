var $ = require("jquery");

$('.modal-open-js').on("click", function () {
  let modalId = $(this).data('modal-id');
  $('.modal[data-modal-id=' + modalId + ']').addClass('open');
  $('.modal-bg').addClass('open');
  $('body').addClass('overflow-hidden');
});

$('.detail-click-js').on("click", function () {
  let detailId = $(this).data('detail-id');
  $('.detail-modal[data-detail-modal=' + detailId + ']').addClass('open');
  $('.modal-bg').addClass('open');
  $('body').addClass('overflow-hidden');
});

$('.date-click-js').on("click", function () {
  let dateId = $(this).data('date-id');
  $('.date-modal[data-date-modal=' + dateId + ']').addClass('open');
  $('.modal-bg').addClass('open');
  $('body').addClass('overflow-hidden');
});

$('.value-modal-js').on("click", function () {
  let modalId = $(this).data('modal-id');
  $('.chart-modal[data-modal-id=' + modalId + ']').addClass('open');
  $('.modal-bg').addClass('open');
  $('body').addClass('overflow-hidden');
});

$('.edit-modal-js').on("click", function () {
  let modalId = $(this).data('modal-id');
  $('.edit-modal[data-modal-id=' + modalId + ']').addClass('open');
  $('.modal-bg').addClass('open');
  $('body').addClass('overflow-hidden');
});

document.addEventListener('click', function (e) {
  if (e.target.classList.value === 'modal-content') {
    $('.modal-bg').removeClass('open');
    $('.detail-modal').removeClass('open');
    $('.date-modal').removeClass('open');
    $('.chart-modal').removeClass('open');
    $('.edit-modal').removeClass('open');
    $('.modal').removeClass('open');
    $('body').removeClass('overflow-hidden');
  }
});

var clipboard = new Clipboard('.copy-click');

clipboard.on('success', function (e) {
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç, –¥–æ —è–∫–æ–≥–æ –±—É–≤ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π copy
  var $trigger = $(e.trigger);
  // tooltip ‚Äì —Å—É—Å—ñ–¥–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –∑ –∫–ª–∞—Å–æ–º .copy-tooltip
  var $tooltip = $trigger.siblings('.copy-tooltip');
  if ($tooltip.length) {
    $tooltip.removeClass('hidden');
    setTimeout(function () {
      $tooltip.addClass('hidden');
    }, 2000);
  }
});

//–Ω—É–º–µ—Ä–∞—Ü—ñ—è 
function updateRowNumbers() {
  const rows = document.querySelectorAll('.website-tr');
  rows.forEach((row, index) => {
    const indexEl = row.querySelector('.row-index');
    if (indexEl) {
      indexEl.textContent = index + 1;
    }
  });
}

//–®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ –¥—Ä–æ–ø—ñ–≤
$("#search_drop_box").keyup(function () {
  var filter = $(this).val();
  filter = filter.toLowerCase();
  $("#drop-table .drop-tr").each(function () {
    var metadata = $(this).data("metadata");
    var regexp = new RegExp(filter);
    var metadatastring = "";
    metadatastring = metadatastring.toLowerCase();

    if (typeof metadata.tag != "undefined") {
      metadatastring = metadata.tag.join(" ");
    }
    if (metadatastring.toLowerCase().search(regexp) < 0) {
      $(this).hide();
    }
    else {
      $(this).show();
    }
  });
});

//–®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ —Å–∞–π—Ç—ñ–≤
$("#search_websites_box").keyup(function () {
  var filter = $(this).val();
  filter = filter.toLowerCase();
  $("#mainsite-table .website-tr").each(function () {
    var metadata = $(this).data("metadata");
    var regexp = new RegExp(filter);
    var metadatastring = "";
    metadatastring = metadatastring.toLowerCase();

    if (typeof metadata.tag != "undefined") {
      metadatastring = metadata.tag.join(" ");
    }
    if (metadatastring.toLowerCase().search(regexp) < 0) {
      $(this).hide();
    }
    else {
      $(this).show();
    }
    updateRowNumbers();
  });
});

updateRowNumbers();

//–ß–µ–∫–±–æ–∫—Å –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
const toggle = document.querySelector('input[type="checkbox"]');
const diffs = document.querySelectorAll('.value-diff');

const updateVisibility = () => {
  diffs.forEach(el => {
    style = toggle.checked ? '' : 'display:none';
    el.setAttribute('style', style);
  });
};
if (toggle) {
  toggle.addEventListener('change', updateVisibility);
}

updateVisibility(); // –æ–Ω–æ–≤–∏—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

//—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è 
let currentSortKey = null;
let sortAscending = false;
const headers = document.querySelectorAll("[data-sort]");
const table = document.querySelector("#mainsite-table");
if (table) {
  rows = Array.from(table.querySelectorAll(".website-tr"));
}

const headerRow = document.getElementById("header-row");

headers.forEach(header => {
  header.classList.add("cursor-pointer");

  header.addEventListener("click", () => {
    const sortKey = header.getAttribute("data-sort");
    if (!sortKey) return;

    if (currentSortKey === sortKey) {
      sortAscending = !sortAscending;
    } else {
      currentSortKey = sortKey;
      sortAscending = false;
    }

    // –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å—Ç—Ä—ñ–ª–∫–∏
    document.querySelectorAll(".sort-direction").forEach(el => el.textContent = "");

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç—Ä—ñ–ª–∫—É —É –ø–æ—Ç–æ—á–Ω–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É
    const arrowSpan = header.querySelector(".sort-direction");
    arrowSpan.textContent = sortAscending ? "üîΩ" : "üîº";

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
    rows.sort((a, b) => {
      const aVal = parseFloat(a.querySelector(`.${sortKey} .sort-value`)?.textContent || 0);
      const bVal = parseFloat(b.querySelector(`.${sortKey} .sort-value`)?.textContent || 0);
      return sortAscending ? aVal - bVal : bVal - aVal;
    });

    // –í–∏–¥—ñ–ª–∏—Ç–∏ –∂–∏—Ä–Ω–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
    headers.forEach(h => h.classList.remove("font-bold"));
    header.classList.add("font-bold");

    rows.forEach(row => {
      row.querySelectorAll("div").forEach(cell => {
        cell.classList.remove("font-bold");
      });
      const targetCell = row.querySelector(`.${sortKey}`);
      if (targetCell) targetCell.classList.add("font-bold");
    });

    rows.forEach(row => table.appendChild(row));

    // –°—Ö–æ–≤–∞—Ç–∏ –ø—ñ–¥—Å–≤—ñ—Ç–∫—É –ø–æ–∑–∏—Ü—ñ—ó
    document.querySelectorAll(".position_change").forEach(el => el.style.display = 'none');

    // –ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
    const urlIndex = 1;
    const allHeaderCells = Array.from(headerRow.children);
    const targetIndex = allHeaderCells.indexOf(header);
    if (targetIndex > -1 && targetIndex !== urlIndex + 1) {
      headerRow.removeChild(header);
      headerRow.insertBefore(header, headerRow.children[urlIndex + 1]);
    }

    // –ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ –∫–æ–∂–Ω–æ–º—É —Ä—è–¥–∫—É
    rows.forEach(row => {
      const cells = Array.from(row.children);
      const targetCell = cells[targetIndex];
      if (targetCell && targetIndex !== urlIndex + 1) {
        row.removeChild(targetCell);
        row.insertBefore(targetCell, row.children[urlIndex + 1]);
      }
    });
  });
});


//–ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –ù–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ
const checkbox = document.getElementById('filter-status-check');
if (checkbox) {
  checkbox.addEventListener('change', function () {
    const rows = document.querySelectorAll('tr[data-tr-status]');
    const targetStatus = '–ù–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ';

    rows.forEach(function (row) {
      const rowStatus = row.getAttribute('data-tr-status');
      if (checkbox.checked) {
        // –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–∏—à–µ —Ç—ñ, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Å—Ç–∞—Ç—É—Å—É
        if (rowStatus === targetStatus) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      } else {
        // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ
        row.style.display = '';
      }
    });
  });
}


document.addEventListener('DOMContentLoaded', function () {
  //load images
  document.querySelectorAll('.download-images-js').forEach(button => {
    button.addEventListener('click', function () {
      const code = button.closest('.modal-box').querySelector('.download-html-source');
      if (!code) return;

      const parser = document.createElement('div');
      parser.innerHTML = code.innerText;

      const images = parser.querySelectorAll('img');
      if (images.length === 0) {
        alert('–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      images.forEach((img, i) => {
        const url = img.src;
        const extension = url.split('.').pop().split(/\#|\?/)[0].split('&')[0] || 'jpg';
        const link = document.createElement('a');
        link.href = url;
        link.download = `image_${i + 1}.${extension}`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      });
    });
  });

  //datepicker

});
